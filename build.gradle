plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'de.ebader'
version = '0.1.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}



configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}




dependencies {
	
	
	implementation("com.fasterxml.jackson.core:jackson-databind")
	
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation "org.springframework.boot:spring-boot-starter-web"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	implementation 'org.springframework.kafka:spring-kafka'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.ibm.db2:jcc'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'io.asyncer:r2dbc-mysql'
	runtimeOnly 'io.r2dbc:r2dbc-h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	
}

tasks.named('test') {
	useJUnitPlatform()
}


jar {
    manifest {
        attributes 'Main-Class': 'de.ebader.pecunia.PecuniaApplication'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE  // This line handles duplicates
    // Hier wird festgelegt, wo das JAR-File gespeichert wird
    archiveFileName = 'pecunia-0.1.1-SNAPSHOT-plain.jar'
    
    compileJava.options.encoding = 'UTF-8'

	tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
}



